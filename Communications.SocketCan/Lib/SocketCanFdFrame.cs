using System;
using System.Runtime.InteropServices;
using Communications.Can;

namespace Communications.SocketCan.Lib
{
    /// <summary>Флаги CanFd фрейма.</summary>
    [Flags]
    public enum CanFdFlags : byte
    {
        /// <summary>Bit rate switch (second bitrate for payload data).</summary>
        CanFdBrs = 0x01,

        /// <summary>Error state indicator of the transmitting node.</summary>
        CanFdEsi = 0x02
    }

    /// <summary>Структура CAN-фрейма в формате SocketCanFd.</summary>
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public unsafe struct SocketCanFdFrame
    {
        /// <remarks>
        ///     <list type="table">
        ///         <item>
        ///             <term>Bit.</term>
        ///             <description>Description.</description>
        ///         </item>
        ///         <item>
        ///             <term>0-28.</term>
        ///             <description> Identifier (11/29 bit).</description>
        ///         </item>
        ///         <item>
        ///             <term>29.</term>
        ///             <description>Error frame flag (0 = data frame, 1 = error frame).</description>
        ///         </item>
        ///         <item>
        ///             <term>30.</term>
        ///             <description>Remote transmission request flag (1 = rtr frame).</description>
        ///         </item>
        ///         <item>
        ///             <term>31.</term>
        ///             <description>Frame format flag (0 = standart 11 bit, 1 = extended 29 bit).</description>
        ///         </item>
        ///     </list>
        /// </remarks>
        public readonly UInt32 Id;

        public readonly Byte DataLength;

        /// <remarks>
        ///     <para>
        ///         The use of struct canfd_frame implies the Extended Data Length (EDL) bit to be set in the CAN frame bitstream
        ///         on the wire. The EDL bit switch turns the CAN controllers bitstream processor into the CAN FD mode which
        ///         creates two new options within the CAN FD frame specification:
        ///     </para>
        ///     <para>
        ///         Bit Rate Switch - to indicate a second bitrate is/was used for the payload Error State Indicator - represents
        ///         the error state of the transmitting node.
        ///     </para>
        ///     <para>
        ///         As the CANFD_ESI bit is internally generated by the transmitting CAN controller only the CANFD_BRS bit is
        ///         relevant for real CAN controllers when building a CAN FD frame for transmission. Setting the CANFD_ESI bit can
        ///         make sense for virtual CAN interfaces to test applications with echoed frames.
        ///     </para>
        /// </remarks>
        public readonly CanFdFlags Flags;

        public readonly Byte Reserved0;
        public readonly Byte Reserved1;
        public fixed byte Data [8];

        public SocketCanFdFrame(uint Id, byte[] Data)
            : this()
        {
            this.Id = Id;
            DataLength = (Byte)Data.Length;
            fixed (byte* d = this.Data)
            {
                for (int i = 0; i < Data.Length; i++)
                    d[i] = Data[i];
            }
        }

        public SocketCanFdFrame(CanFrame Frame) : this((uint)Frame.Id, Frame.Data) { }

        public override string ToString() { return String.Format("Id: {0:X3}, DataLength: {1}, Flags: {2}", Id, DataLength, Flags); }
    }
}